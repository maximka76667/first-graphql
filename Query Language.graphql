# Custom Scalar Type
scalar DateTime

# Enums
enum PhotoCategory {
  SELFIE
  PORTRAIT
  ACTION
  LANDSCAPE
  GRAPHIC
}

# Custom Type
type Photo {
  id: ID!
  name: String!
  url: String!
  description: String
  created: DateTime!
  category: PhotoCategory!
}

# -----------------------
# One-to-one relationship
# -----------------------

type User {
  githubLogin: ID!
  name: String
  avatar: String
}

type Photo {
  id: ID!
  name: String!
  url: String!
  description: String
  created: DateTime!
  category: PhotoCategory!
  postedBy: User!
}

# ------------------------
# One-to-many relationship
# ------------------------

# Now we can also access photos from user
# Not only by postedBy property on photo
type User {
  githubLogin: ID!
  name: String
  avatar: String
  postedPhotos: [Photo!]!
}

# ------------------------
# Defining root query type
# ------------------------

# Could obtain amount of photos or users by total property
# allPhotos and allUsers are arrays which store data of these types
type Query {
  totalPhotos: Int!
  allPhotos: [Photo!]!
  totalUsers: Int!
  allUsers: [User!]!
}

schema {
  query: Query
}

# -------------
# Example query
# -------------

# Now we can use this to fetch data
query {
  totalPhotos
  allPhotos {
    name
    url
  }
}

# -------------------------
# Many-to-many relationship
# -------------------------

# Our application will allow users to identify other users in each photo that
# they post. This process is called tagging. A photo can consist of many users, and
# a user can be tagged in many photos
type User {
  ...
  inPhotos: [Photo!]!
}

type Photo {
  ...
  taggedUsers: [User!]!
}

# -------------
# Through types
# -------------

# Friendships between users could describe this way
type User {
  friends: [User!]!
}

# Here, we’ve defined a list of friends for each user. Consider a case in which we
# wanted to save some information about the friendship itself, like how long users
# have known one another or where they met.

# In this situation, we need to define the edge as a custom object type. We call this
# object a through type because it is a node that is designed to connect two nodes.
# Let’s define a through type called Friendship that we can use to connect two
# friends but also deliver data on how the friends are connected

type User {
  friends: [Friendship!]!
}

type Friendship {
  friend_a: User!
  friend_b: User!
  howLong: Int!
  whereWeMet: Location
}

# We can improve upon the design of the Friendship type by allowing for a group
# of friends to be a part of the friendship. For example, maybe you met your best
# friends at the same time in first grade. We can allow for two or more friends to
# be a part of the friendship by adding a single field called friends

type Friendship {
  friends: [User!]!
  howLong: Int!
  whereWeMet: Location
}

# ------------------------
# Lists of different types
# ------------------------

# Union Types
# ===========

# Example schedule
query schedule {
  agenda {
    ...on Workout {
      name
      reps
    }
    ...on StudyGroup {
      name
      subject
      students
    }
  }
}

# We could handle this by creating a union type AgendaItem
union AgendaItem = StudyGroup | Workout

type StudyGroup {
  name: String!
  subject: String
  students: [User!]!
}

type Workout {
  name: String!
  reps: Int!
}

type Query {
  agenda: [AgendaItem!]!
}

# It is possible to join as many types as we want under a single union. Simply
# separate each type with a pipe
union = StudyGroup | Workout | Class | Meal | Meeting | FreeTime

# Interfaces
# ==========

query schedule {
  agenda {
    name
    start
    end
    ...on Workout {
      reps
    }
  }
}


# Here is how we would implement this solution in our GraphQL schema:
scalar DataTime

interface AgendaItem {
  name: String!
  start: DateTime!
  end: DateTime!
}

type StudyGroup implements AgendaItem {
  name: String!
  start: DateTime!
  end: DateTime!
  participants: [User!]!
  topic: String!
}

type Workout implements AgendaItem {
  name: String!
  start: DateTime!
  end: DateTime!
  reps: Int!
}

type Query {
  agenda: [AgendaItem!]!
}

# ---------
# Arguments
# ---------

type Query {
  ...
  User(githubLogin: ID!): User!
  Photo(id: ID!): Photo!
}

# Usage

# For user
query {
  User(githubLogin: "maximka76667") {
    name
    avatar
  }
}

# For photo
query {
  Photo(id: "5") {
    name
    description
    url
  }
}

# Filtering Data
# ==============

# Here category is optional argument of PhotoCategory type
type Query {
  ...
  allPhotos(category: PhotoCategory): [Photo!]!
}

query {
  allPhotos(category: "SELFIE") {
    name
    description
    url
  }
}

# Data paging
# ===========

# We can use GraphQL arguments to control the amount of data
# that is returned from our queries. This process is called data paging because a
# specific number of records are returned to represent one page of data.

type Query {
  ...
  allUsers(first: Int=50 start: Int=0): [User!]!
  allPhotos(first: Int=25 start: Int=0)
}

# In the preceding example, we have added optional arguments for first and start.
# If the client does not supply these arguments with the query, we will use the
# default values provided. By default, the allUsers query returns only the first 50
# users, and the allPhotos query returns only the first 25 photos.

# 90 through 100 users
query {
  allUsers(first: 10 start: 90) {
    name
    avatar
  }
}

# Sorting
# =======

enum SortDirection {
  ASCENDING
  DESCENDING
}

enum SortablePhotoField {
  name
  description
  category
  created
}

Query {
  allPhotos(
    sort: SortDirection = DESCENDING
    sortBy: SortablePhotoField = created
  ): [Photo!]!
}

# Both arguments are optional and defaulted to DESCENDING order by created field of Photo type

query {
  allPhotos(sortBy: name)
}

# This query will return all photos sorted by name in a descending order

# So far, we’ve added arguments only to fields of the Query type, but it is
# important to note that you can add arguments to any field. We could add the
# filtering, sorting, and paging arguments to the photos that have been posted by a
# single user:
type User {
  postedPhotos(
    first: Int = 25
    start: Int = 0
    sort: SortDirection = DESCENDING
    sortBy: SortablePhotoField = created
    category: PhotoCategory
  ): [Photo!]
}

# ---------
# Mutations
# ---------

type Mutation {
  postPhoto(
    name: String!
    description: String
    category: PhotoCategory = PORTRAIT
  ): Photo!
}

schema {
  query: Query
  mutation: Mutation
}

# When a user posts a photo, at a bare minimum the photo’s name is required. The
# description and category are optional. If a category argument is not supplied, the
# posted photo will be defaulted to PORTRAIT. For example, a user can post a
# photo by sending the following mutation:

mutation {
  postPhoto(name: "Valencia Trip") {
    id
    url
    created
    postedBy {
      name
    }
  }
}

# Mutation variable on client
# ===========================

mutation postPhoto(
  $name: String!
  $description: String
  $category: PhotoCategory
) {
  postPhoto(
    name: $name
    description: $description
    category: $category
  ) {
    id
    name
    email
  }
}

# -----------
# Input types
# -----------

# There is a better way to organize lengthy
# arguments using input types.

input PostPhotoInput {
  name: String!
  description: String
  category: PhotoCategory = PORTRAIT
}

type Mutation {
  postPhoto(input: PostPhotoInput): Photo!
}

mutation newPhotos($input: PostPhotoInput!) {
  postPhoto(input: $input) {
    id
    url
    created
  }
}

# Input types are key to organizing and writing a clear GraphQL schema. You can
# use input types as arguments on any field. You can use them to improve both
# data paging and data filtering in applications.

input PhotoFilter {
  category: PhotoCategory
  createdBetween: DateRange
  taggedUsers: [ID!]
  searchText: String
}

input DateRange {
  start: DateTime!
  end: DateTime!
}

input DataPage {
  first: Int = 25
  start: Int = 0
}

input DataSort {
  sort: SortDirection = DESCENDING
  sortBy: SortablePhotoField = created
}

type User {
  ...
  postedPhotos(filter:PhotoFilter paging:DataPage sorting:DataSort): [Photo!]!
  inPhotos(filter:PhotoFilter paging:DataPage sorting:DataSort): [Photo!]!
}

type Photo {
  ...
  taggedUsers(sorting:DataSort): [User!]!
}

type Query {
  ...
  allUsers(paging:DataPage sorting:DataSort): [User!]!
  allPhotos(filter:PhotoFilter paging:DataPage sorting:DataSort): [Photo!]!
}

# Input types have also been created for paging and sorting. The DataPage input
# type contains the fields needed to request a page of data and the DataSort input
# type contains our sorting fields. These input types have been added to every field
# in our schema that returns a list of data.

query getPhotos($filter:PhotoFilter $page:DataPage $sort:DataSort) {
  allPhotos(filter:$filter paging:$page sorting:$sort) {
    id
    name
    url
  }
}

{
  "filter": {
    "category": "ACTION",
    "taggedUsers": ["MoonTahoe", "EvePorcello"],
    "createdBetween": {
      "start": "2018-11-6",
      "end": "2018-5-31"
    }
  },
  "page": {
    "first": 100
  }
}

# This query will find all of the ACTION photos for which GitHub users
# MoonTahoe and EvePorcello are tagged between November 6th and May 31st,
# which happens to be ski season. We also ask for the first 100 photos with this
# query.

# -------------
# Subscriptions
# -------------

type Subscription {
  newPhoto: Photo!
  newUser: User!
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

# With arguments
type Subscription {
  newPhoto(category: PhotoCategory): Photo!
  newUser: User!
}